space @A 8
space @B 8
space @C 8
space @N 8
asciiz @string Never Ever!
asciiz @string_2 length error!

func calc $A {

%calc.entry:
    $size = load 8 $A 0
    $len = move $size
    $t = seq 1 $len
    br $t %if_true %if_after

%if_after:
    $t_2 = div $len 2
    $mid = move $t_2
    $t_3 = sub $mid 1
    $substr = call string.substring $A 0 $t_3 
    $t_4 = call calc $substr 
    $L = move $t_4
    $t_5 = sub $len 1
    $substr_2 = call string.substring $A $mid $t_5 
    $t_6 = call calc $substr_2 
    $R = move $t_6
    $t_7 = call string.less $L $R 
    br $t_7 %if_true_2 %if_false

%if_false:
    $t_8 = call string.equal $L $R 
    br $t_8 %if_true_3 %if_false_2

%if_false_2:
    $t_9 = call string.less $R $L 
    br $t_9 %if_true_4 %if_after_2

%if_after_2:
    jump %if_after_3

%if_after_3:
    jump %if_after_4

%if_after_4:
    call println @string 
    $returnValue = move 0
    jump %calc.exit

%if_true_4:
    $t_10 = call string.concat $R $L 
    $returnValue = move $t_10
    jump %calc.exit

%if_true_3:
    $ord = add $L 0
    $ord = load 1 $ord 8
    $l = move $ord
    $ord_2 = add $R 0
    $ord_2 = load 1 $ord_2 8
    $r = move $ord_2
    $t_11 = slt $l $r
    br $t_11 %if_true_5 %if_after_5

%if_true_5:
    $t_12 = call string.concat $L $R 
    $returnValue = move $t_12
    jump %calc.exit

%if_after_5:
    $t_13 = call string.concat $R $L 
    $returnValue = move $t_13
    jump %calc.exit

%if_true_2:
    $t_14 = call string.concat $L $R 
    $returnValue = move $t_14
    jump %calc.exit

%if_true:
    $returnValue = move $A
    jump %calc.exit

%calc.exit:
    ret $returnValue

}

func main {

%main.entry:
    call _init 
    $gottenstring = call getString 
    @A = move $gottenstring
    $gottenstring_2 = call getString 
    @B = move $gottenstring_2
    $parsedint = call string.parseInt @B 
    @N = move $parsedint
    $size = load 8 @A 0
    $t = slt $size @N
    br $t %if_true_6 %if_after_6

%if_true_6:
    call println @string_2 
    $returnValue = move 0
    jump %main.exit

%if_after_6:
    $t_2 = sub @N 1
    $substr = call string.substring @A 0 $t_2 
    $t_3 = call calc $substr 
    @C = move $t_3
    call println @C 
    $returnValue = move 0
    jump %main.exit

%main.exit:
    ret $returnValue

}

func _init {

%_init.entry:
    @A = move 0
    @B = move 0
    @C = move 0
    @N = move 0
    ret 0

}

