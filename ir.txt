space @sat 8
space @assignment 8
space @cond_ass 8
space @k 8
space @n 8
space @m 8
space @last 8
space @myHash 8
asciiz @string - 
asciiz @string_2 *x
asciiz @string_3 xz 
asciiz @string_4  <= 0;\n
asciiz @string_5 x
asciiz @string_6  + 
asciiz @string_7  = 1;\n
asciiz @string_8 max: xz;\n

func check {

%check.entry:
    $i = move 0
    $j = move 0
    $i = move 0
    jump %for_cond

%for_cond:
    $t = slt $i @m
    br $t %for_loop %for_after

%for_loop:
    $succ = move 0
    $j = move 0
    jump %for_cond_2

%for_cond_2:
    $t_2 = slt $j 3
    br $t_2 %for_loop_2 %for_after_2

%for_loop_2:
    $t_3 = mul $i 8
    $t_3 = add @sat $t_3
    $t_3 = load 8 $t_3 8
    $t_4 = mul $j 8
    $t_4 = add $t_3 $t_4
    $t_4 = load 8 $t_4 8
    $var = move $t_4
    $t_5 = sgt $var 0
    br $t_5 %lhs_true %lhs_false

%lhs_true:
    $t_6 = mul $var 8
    $t_6 = add @assignment $t_6
    $t_6 = load 8 $t_6 8
    $t_7 = seq $t_6 1
    $t_8 = move $t_7
    jump %lhs_merge

%lhs_false:
    $t_8 = move 0
    jump %lhs_merge

%lhs_merge:
    br $t_8 %if_true %if_after

%if_true:
    $succ = move 1
    jump %if_after

%if_after:
    $t_9 = slt $var 0
    br $t_9 %lhs_true_2 %lhs_false_2

%lhs_true_2:
    $t_10 = neg $var
    $t_11 = mul $t_10 8
    $t_11 = add @assignment $t_11
    $t_11 = load 8 $t_11 8
    $t_12 = seq $t_11 0
    $t_13 = move $t_12
    jump %lhs_merge_2

%lhs_false_2:
    $t_13 = move 0
    jump %lhs_merge_2

%lhs_merge_2:
    br $t_13 %if_true_2 %if_after_2

%if_true_2:
    $succ = move 1
    jump %if_after_2

%if_after_2:
    jump %for_step

%for_step:
    $j = add $j 1
    jump %for_cond_2

%for_after_2:
    $t_14 = seq $succ 0
    br $t_14 %if_true_3 %if_after_3

%if_true_3:
    $returnValue = move 0
    jump %check.exit

%if_after_3:
    jump %for_step_2

%for_step_2:
    $i = add $i 1
    jump %for_cond

%for_after:
    $returnValue = move 1
    jump %check.exit

%check.exit:
    ret $returnValue

}

func myprint $x {

%myprint.entry:
    $i = move 0
    $i = move 0
    jump %for_cond_3

%for_cond_3:
    $size = load 8 $x 0
    $t = slt $i $size
    br $t %for_loop_3 %for_after_3

%for_loop_3:
    $ord = call string.ord $x $i 
    $t_2 = add @myHash $ord
    @myHash = move $t_2
    jump %for_step_3

%for_step_3:
    $i = add $i 1
    jump %for_cond_3

%for_after_3:
    ret 0

}

func payoff $a $b {

%payoff.entry:
    $ret = move 0
    $i = move 0
    $i = move 0
    jump %for_cond_4

%for_cond_4:
    $t = slt $i 3
    br $t %for_loop_4 %for_after_4

%for_after_4:
    ret $ret

%for_loop_4:
    $t_2 = mul $i 8
    $t_2 = add $a $t_2
    $t_2 = load 8 $t_2 8
    $t_3 = mul $i 8
    $t_3 = add $b $t_3
    $t_3 = load 8 $t_3 8
    $t_4 = sne $t_2 $t_3
    br $t_4 %if_true_4 %if_after_4

%if_true_4:
    $t_5 = move $ret
    $ret = add $ret 1
    jump %if_after_4

%if_after_4:
    jump %for_step_4

%for_step_4:
    $i = add $i 1
    jump %for_cond_4

}

func print_cond $dep {

%print_cond.entry:
    $t = seq $dep @n
    br $t %if_true_5 %if_after_5

%if_after_5:
    $t_2 = add $dep 1
    $t_3 = mul $t_2 8
    $t_3 = add @cond_ass $t_3
    store 8 $t_3 1 8
    $t_4 = add $dep 1
    $t_5 = call print_cond $t_4 
    $t_6 = add $dep 1
    $t_7 = mul $t_6 8
    $t_7 = add @cond_ass $t_7
    store 8 $t_7 0 8
    $t_8 = add $dep 1
    $t_9 = call print_cond $t_8 
    jump %print_cond.exit

%if_true_5:
    $t_10 = call payoff @cond_ass @assignment 
    $tostring = call toString $t_10 
    $t_11 = call string.concat @string $tostring 
    $t_12 = call string.concat $t_11 @string_2 
    $t_13 = call myprint $t_12 
    $i = move 0
    $i = move 0
    jump %for_cond_5

%for_cond_5:
    $t_14 = slt $i @n
    br $t_14 %for_loop_5 %for_after_5

%for_after_5:
    jump %print_cond.exit

%print_cond.exit:
    ret 0

%for_loop_5:
    $t_15 = rem $i 10
    $t_16 = seq $t_15 0
    br $t_16 %if_true_6 %if_after_6

%if_true_6:
    $t_17 = add $i 1
    $t_18 = mul $t_17 8
    $t_18 = add @cond_ass $t_18
    $t_18 = load 8 $t_18 8
    $tostring_2 = call toString $t_18 
    $t_19 = call myprint $tostring_2 
    jump %if_after_6

%if_after_6:
    jump %for_step_5

%for_step_5:
    $i = add $i 1
    jump %for_cond_5

}

func dfs $dep {

%dfs.entry:
    $t = seq $dep @n
    br $t %if_true_7 %if_after_7

%if_after_7:
    $t_2 = add $dep 1
    $t_3 = mul $t_2 8
    $t_3 = add @assignment $t_3
    store 8 $t_3 1 8
    $t_4 = add $dep 1
    $t_5 = call dfs $t_4 
    $t_6 = add $dep 1
    $t_7 = mul $t_6 8
    $t_7 = add @assignment $t_7
    store 8 $t_7 0 8
    $t_8 = add $dep 1
    $t_9 = call dfs $t_8 
    jump %dfs.exit

%if_true_7:
    $t_10 = call check 
    $t_11 = seq $t_10 1
    br $t_11 %if_true_8 %if_after_8

%if_true_8:
    $t_12 = call myprint @string_3 
    $t_13 = call print_cond 0 
    $t_14 = call myprint @string_4 
    jump %if_after_8

%if_after_8:
    jump %dfs.exit

%dfs.exit:
    ret 0

}

func print_last_cond $dep {

%print_last_cond.entry:
    $t = seq $dep @n
    br $t %if_true_9 %if_after_9

%if_true_9:
    $t_2 = call myprint @string_5 
    $islast = move 1
    $i = move 0
    $i = move 0
    jump %for_cond_6

%for_cond_6:
    $t_3 = slt $i @n
    br $t_3 %for_loop_6 %for_after_6

%for_after_6:
    $t_4 = seq $islast 0
    br $t_4 %if_true_10 %if_false

%if_true_10:
    $t_5 = call myprint @string_6 
    jump %if_after_10

%if_false:
    $t_6 = call myprint @string_7 
    jump %if_after_10

%if_after_10:
    jump %print_last_cond.exit

%for_loop_6:
    $t_7 = add $i 1
    $t_8 = mul $t_7 8
    $t_8 = add @assignment $t_8
    $t_8 = load 8 $t_8 8
    $t_9 = seq $t_8 1
    br $t_9 %if_true_11 %if_after_11

%if_true_11:
    $islast = move 0
    jump %if_after_11

%if_after_11:
    $t_10 = add $i 1
    $t_11 = mul $t_10 8
    $t_11 = add @assignment $t_11
    $t_11 = load 8 $t_11 8
    $tostring = call toString $t_11 
    $t_12 = call myprint $tostring 
    jump %for_step_6

%for_step_6:
    $i = add $i 1
    jump %for_cond_6

%if_after_9:
    $t_13 = add $dep 1
    $t_14 = mul $t_13 8
    $t_14 = add @assignment $t_14
    store 8 $t_14 1 8
    $t_15 = add $dep 1
    $t_16 = call print_last_cond $t_15 
    $t_17 = add $dep 1
    $t_18 = mul $t_17 8
    $t_18 = add @assignment $t_18
    store 8 $t_18 0 8
    $t_19 = add $dep 1
    $t_20 = call print_last_cond $t_19 
    jump %print_last_cond.exit

%print_last_cond.exit:
    ret 0

}

func main {

%main.entry:
    call _init 
    $gottenint = call getInt 
    @k = move $gottenint
    $t = mul 2 @k
    $t_2 = add $t 1
    @n = move $t_2
    @m = move @k
    @last = move 1
    $t_3 = call myprint @string_8 
    $newaddress = mul @m 8
    $newaddress = add $newaddress 8
    $newaddress = alloc $newaddress
    store 8 $newaddress @m 0
    @sat = move $newaddress
    $i = move 0
    $i = move 0
    jump %for_cond_7

%for_cond_7:
    $t_4 = slt $i @m
    br $t_4 %for_loop_7 %for_after_7

%for_after_7:
    $t_5 = add @n 1
    $newaddress_2 = mul $t_5 8
    $newaddress_2 = add $newaddress_2 8
    $newaddress_2 = alloc $newaddress_2
    store 8 $newaddress_2 $t_5 0
    @assignment = move $newaddress_2
    $t_6 = add @n 1
    $newaddress_3 = mul $t_6 8
    $newaddress_3 = add $newaddress_3 8
    $newaddress_3 = alloc $newaddress_3
    store 8 $newaddress_3 $t_6 0
    @cond_ass = move $newaddress_3
    $t_7 = call dfs 0 
    $t_8 = call print_last_cond 0 
    call printlnint @myHash 
    ret 0

%for_loop_7:
    $newaddress_4 = move 32
    $newaddress_4 = alloc $newaddress_4
    store 8 $newaddress_4 3 0
    $clause = move $newaddress_4
    $t_9 = add $clause 0
    store 8 $t_9 @last 8
    $t_10 = add @last 1
    $t_11 = add $clause 8
    store 8 $t_11 $t_10 8
    $t_12 = add @last 2
    $t_13 = neg $t_12
    $t_14 = add $clause 16
    store 8 $t_14 $t_13 8
    $t_15 = add @last 2
    @last = move $t_15
    $t_16 = mul $i 8
    $t_16 = add @sat $t_16
    store 8 $t_16 $clause 8
    jump %for_step_7

%for_step_7:
    $i = add $i 1
    jump %for_cond_7

}

func _init {

%_init.entry:
    @sat = move 0
    @assignment = move 0
    @cond_ass = move 0
    @k = move 0
    @n = move 0
    @m = move 0
    @last = move 0
    @myHash = move 0
    ret 0

}

