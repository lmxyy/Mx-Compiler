space @hashsize 8
space @table 8
asciiz @string  

func node $this {

%node.entry:
    ret 0

}

func getHash $n {

%getHash.entry:
    $t = mul $n 237
    $t_2 = rem $t @hashsize
    ret $t_2

}

func put $key $data {

%put.entry:
    $p = move 0
    $ptr = move 0
    $t = call getHash $key 
    $p = move $t
    $t_2 = mul $p 8
    $t_2 = add @table $t_2
    $t_2 = load 8 $t_2 8
    $t_3 = seq $t_2 0
    br $t_3 %if_true %if_after

%if_true:
    $newaddress = alloc 24
    call node $newaddress 
    $t_4 = mul $p 8
    $t_4 = add @table $t_4
    store 8 $t_4 $newaddress 8
    $t_5 = mul $p 8
    $t_5 = add @table $t_5
    $t_5 = load 8 $t_5 8
    store 8 $t_5 $key 0
    $t_6 = mul $p 8
    $t_6 = add @table $t_6
    $t_6 = load 8 $t_6 8
    store 8 $t_6 $data 8
    $t_7 = mul $p 8
    $t_7 = add @table $t_7
    $t_7 = load 8 $t_7 8
    store 8 $t_7 0 16
    jump %put.exit

%if_after:
    $t_8 = mul $p 8
    $t_8 = add @table $t_8
    $t_8 = load 8 $t_8 8
    $ptr = move $t_8
    jump %while_cond

%while_cond:
    $t_9 = load 8 $ptr 0
    $t_10 = sne $t_9 $key
    br $t_10 %while_loop %while_after

%while_loop:
    $t_11 = load 8 $ptr 16
    $t_12 = seq $t_11 0
    br $t_12 %if_true_2 %if_after_2

%if_true_2:
    $newaddress_2 = alloc 24
    call node $newaddress_2 
    store 8 $ptr $newaddress_2 16
    $t_13 = load 8 $ptr 16
    store 8 $t_13 $key 0
    $t_14 = load 8 $ptr 16
    store 8 $t_14 0 16
    jump %if_after_2

%if_after_2:
    $t_15 = load 8 $ptr 16
    $ptr = move $t_15
    jump %while_cond

%while_after:
    store 8 $ptr $data 8
    jump %put.exit

%put.exit:
    ret 0

}

func get $key {

%get.entry:
    $ptr = move 0
    $t = call getHash $key 
    $t_2 = mul $t 8
    $t_2 = add @table $t_2
    $t_2 = load 8 $t_2 8
    $ptr = move $t_2
    jump %while_cond_2

%while_cond_2:
    $t_3 = load 8 $ptr 0
    $t_4 = sne $t_3 $key
    br $t_4 %while_loop_2 %while_after_2

%while_loop_2:
    $t_5 = load 8 $ptr 16
    $ptr = move $t_5
    jump %while_cond_2

%while_after_2:
    $t_6 = load 8 $ptr 8
    ret $t_6

}

func main {

%main.entry:
    call _init 
    $i = move 0
    $newaddress = move 808
    $newaddress = alloc $newaddress
    store 8 $newaddress 100 0
    @table = move $newaddress
    $i = move 0
    jump %for_cond

%for_cond:
    $t = slt $i @hashsize
    br $t %for_loop %for_after

%for_after:
    $i = move 0
    jump %for_cond_2

%for_cond_2:
    $t_2 = slt $i 1000
    br $t_2 %for_loop_2 %for_after_2

%for_loop_2:
    $t_3 = call put $i $i 
    jump %for_step

%for_step:
    $t_4 = move $i
    $i = add $i 1
    jump %for_cond_2

%for_after_2:
    $i = move 0
    jump %for_cond_3

%for_cond_3:
    $t_5 = slt $i 1000
    br $t_5 %for_loop_3 %for_after_3

%for_loop_3:
    call printint $i 
    call print @string 
    $t_6 = call get $i 
    call printlnint $t_6 
    jump %for_step_2

%for_step_2:
    $t_7 = move $i
    $i = add $i 1
    jump %for_cond_3

%for_after_3:
    ret 0

%for_loop:
    $t_8 = mul $i 8
    $t_8 = add @table $t_8
    store 8 $t_8 0 8
    jump %for_step_3

%for_step_3:
    $t_9 = move $i
    $i = add $i 1
    jump %for_cond

}

func _init {

%_init.entry:
    @hashsize = move 100
    @table = move 0
    ret 0

}

