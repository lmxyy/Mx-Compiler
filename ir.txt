func add $x $y {

%add.entry:
    $t = add $x $y
    $t_2 = rem $t 233
    ret $t_2

}

func dp $x {

%dp.entry:
    $t = sle $x 1
    br $t %if_true %if_after

%if_after:
    $sum = move 0
    $i = move 0
    $i = move 2
    jump %for_cond

%for_cond:
    $t_2 = sle $i $x
    br $t_2 %for_loop %for_after

%for_loop:
    $t_3 = xor $x $i
    $t_4 = slt $t_3 $x
    br $t_4 %if_true_2 %if_after_2

%if_true_2:
    $t_5 = xor $x $i
    $t_6 = call dp $t_5 
    $t_7 = call add $sum $t_6 
    $sum = move $t_7
    jump %if_after_2

%if_after_2:
    jump %for_step

%for_step:
    $t_8 = move $i
    $i = add $i 1
    jump %for_cond

%for_after:
    $returnValue = move $sum
    jump %dp.exit

%if_true:
    $tmp = move 36
    $returnValue = move $tmp
    jump %dp.exit

%dp.exit:
    ret $returnValue

}

func main {

%main.entry:
    call _init 
    $i = move 0
    $gottenint = call getInt 
    $n = move $gottenint
    $i = move 1
    jump %for_cond_2

%for_cond_2:
    $t = sle $i $n
    br $t %for_loop_2 %for_after_2

%for_after_2:
    ret 0

%for_loop_2:
    $t_2 = call dp $i 
    call printlnint $t_2 
    jump %for_step_2

%for_step_2:
    $t_3 = move $i
    $i = add $i 1
    jump %for_cond_2

}

func _init {

%_init.entry:
    ret 0

}

